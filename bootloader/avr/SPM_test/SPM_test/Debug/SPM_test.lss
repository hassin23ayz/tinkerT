
SPM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003ff  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000211  00000000  00000000  0000070b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a9  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  00000e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <dbg_putchar>:
#define DBG_UART_TX_NUM_ADD_NOP		((F_CPU/DBG_UART_BAUDRATE-16)%4)
	uint8_t sreg;
	uint16_t tmp;
	uint8_t numiter = 10;

	sreg = SREG;
  96:	2f b7       	in	r18, 0x3f	; 63
	cli();
  98:	f8 94       	cli

	asm volatile (
  9a:	9a e0       	ldi	r25, 0x0A	; 10
  9c:	e8 b1       	in	r30, 0x08	; 8
  9e:	ef 7d       	andi	r30, 0xDF	; 223
  a0:	e8 b9       	out	0x08, r30	; 8
	...
  aa:	00 00       	nop
  ac:	ed ec       	ldi	r30, 0xCD	; 205
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <dbg_putchar+0x1a>
  b4:	00 00       	nop
  b6:	e8 b1       	in	r30, 0x08	; 8
  b8:	80 fd       	sbrc	r24, 0
  ba:	e0 62       	ori	r30, 0x20	; 32
  bc:	80 ff       	sbrs	r24, 0
  be:	ef 7d       	andi	r30, 0xDF	; 223
  c0:	e8 b9       	out	0x08, r30	; 8
  c2:	08 94       	sec
  c4:	87 95       	ror	r24
  c6:	9a 95       	dec	r25
  c8:	89 f7       	brne	.-30     	; 0xac <dbg_putchar+0x16>
		  "M" (1<<DBG_UART_TX_PIN),
		  "i" (DBG_UART_TX_NUM_DELAY_CYCLES),
		  "1" (c),			/* data */
		  "2" (numiter)
	);
	SREG = sreg;
  ca:	2f bf       	out	0x3f, r18	; 63
  cc:	08 95       	ret

000000ce <debug_output>:
}

void debug_output(const char* ptrDbgStr)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	while (*ptrDbgStr)
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	31 f0       	breq	.+12     	; 0xe6 <debug_output+0x18>
  da:	21 96       	adiw	r28, 0x01	; 1
	{
		dbg_putchar((uint8_t)*ptrDbgStr++);
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <dbg_putchar>
	SREG = sreg;
}

void debug_output(const char* ptrDbgStr)
{
	while (*ptrDbgStr)
  e0:	89 91       	ld	r24, Y+
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <debug_output+0xe>
	{
		dbg_putchar((uint8_t)*ptrDbgStr++);
	}
	dbg_putchar('\r');
  e6:	8d e0       	ldi	r24, 0x0D	; 13
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <dbg_putchar>
	dbg_putchar('\n'); //line feed LF
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <dbg_putchar>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <main>:
#include <util/delay.h>
#include "dbg_putchar.h"

int main(void)
{
	debug_output("SPM test on atmega328");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 67 00 	call	0xce	; 0xce <debug_output>
	debug_output("statement 1");
 100:	86 e1       	ldi	r24, 0x16	; 22
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 67 00 	call	0xce	; 0xce <debug_output>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 e6       	ldi	r24, 0x69	; 105
 10c:	98 e1       	ldi	r25, 0x18	; 24
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x16>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x20>
 118:	00 00       	nop
	_delay_ms(1000);
	debug_output("statement 2");
 11a:	82 e2       	ldi	r24, 0x22	; 34
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 67 00 	call	0xce	; 0xce <debug_output>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	89 e6       	ldi	r24, 0x69	; 105
 126:	98 e1       	ldi	r25, 0x18	; 24
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x30>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x3a>
 132:	00 00       	nop
	_delay_ms(1000);
	debug_output("statement 3");
 134:	8e e2       	ldi	r24, 0x2E	; 46
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 67 00 	call	0xce	; 0xce <debug_output>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 e6       	ldi	r24, 0x69	; 105
 140:	98 e1       	ldi	r25, 0x18	; 24
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x4a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x54>
 14c:	00 00       	nop
	_delay_ms(1000);
	debug_output("statement 4");
 14e:	8a e3       	ldi	r24, 0x3A	; 58
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 67 00 	call	0xce	; 0xce <debug_output>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 e6       	ldi	r24, 0x69	; 105
 15a:	98 e1       	ldi	r25, 0x18	; 24
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x64>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x6e>
 166:	00 00       	nop
	_delay_ms(1000);
	debug_output("statement 5");
 168:	86 e4       	ldi	r24, 0x46	; 70
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 67 00 	call	0xce	; 0xce <debug_output>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 e6       	ldi	r24, 0x69	; 105
 174:	98 e1       	ldi	r25, 0x18	; 24
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x7e>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x88>
 180:	00 00       	nop
	_delay_ms(1000);	
    //while (1) 
    //{}
return 0;
}
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
